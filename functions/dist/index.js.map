{"version":3,"sources":["../src/index.ts","../src/core/error/app-error.ts","../src/infra/http/api-server.ts","../src/infra/libs/mongoose/index.ts","../src/infra/http/routes/index.ts","../src/env/index.ts","../src/infra/http/middlewares/verify-auth-and-account.ts","../src/infra/http/routes/auth-router.ts","../src/infra/databases/model/mongoose-account-model.ts","../src/infra/databases/model/mongoose-user-model.ts","../src/infra/http/controllers/auth/login-user-controller.ts","../src/infra/http/controllers/auth/register-user-controller.ts","../src/infra/http/routes/suppliers-router.ts","../src/infra/databases/model/mongoose-supplier-model.ts","../src/infra/http/controllers/suppliers/create-supplier-controller.ts","../src/infra/http/controllers/suppliers/delete-supplier-controller.ts","../src/infra/http/controllers/suppliers/fetch-by-id-supplier-controller.ts","../src/infra/http/controllers/suppliers/fetch-many-supplier-controller.ts","../src/infra/http/controllers/suppliers/update-supplier-controller.ts","../src/infra/http/routes/events-router.ts","../src/infra/databases/model/mongoose-event-model.ts","../src/infra/http/controllers/events/create-event-controller.ts","../src/infra/http/controllers/events/fetch-many-event-controller.ts","../src/infra/http/controllers/events/delete-event-controller.ts","../src/infra/http/controllers/events/fetch-by-id-event-controller.ts","../src/infra/http/controllers/events/update-event-controller.ts","../src/infra/http/routes/dashboard-router.ts","../src/infra/http/controllers/dashboard/dashboard-controller.ts","../src/infra/http/routes/calendar-router.ts","../src/infra/http/controllers/calendar/calendar-controller.ts"],"sourcesContent":["import { onRequest } from \"firebase-functions/v2/https\";\nimport { getApiServerConfiguration } from \"./infra/http/api-server\";\n\nconst api = onRequest(getApiServerConfiguration());\n\nexport { api };\n","import type { HttpStatusCode } from \"../infra/enums/http-status-code\";\n\nexport interface AppErrorProps {\n\tmessage: string;\n\tpayload?: Record<string, unknown>;\n\tstatusCode: HttpStatusCode;\n}\n\nexport class AppError extends Error implements AppErrorProps {\n\tpublic readonly message: string;\n\tpublic readonly payload: Record<string, unknown>;\n\tpublic readonly statusCode: HttpStatusCode;\n\n\tconstructor({ message, statusCode, payload = {} }: AppErrorProps) {\n\t\tsuper();\n\n\t\tthis.message = message;\n\t\tthis.payload = payload;\n\t\tthis.statusCode = statusCode;\n\t}\n}\n","import { AppError } from \"@/core/error/app-error\";\nimport { HttpStatusCode } from \"@/core/infra/enums/http-status-code\";\nimport express, {\n\ttype NextFunction,\n\ttype Request,\n\ttype Response,\n} from \"express\";\nimport \"express-async-errors\";\nimport { ZodError } from \"zod\";\nimport { fromZodError } from \"zod-validation-error\";\nimport { loadMongodbConnection } from \"../libs/mongoose\";\nimport routes from \"./routes\";\n\nexport function getApiServerConfiguration() {\n\tconst app = express();\n\n\tapp.use(express.json());\n\tapp.use(express.urlencoded({ extended: true }));\n\n\tapp.use(routes);\n\n\tloadMongodbConnection();\n\n\tapp.use(\n\t\t(\n\t\t\terror: unknown,\n\t\t\t_request: Request,\n\t\t\tresponse: Response,\n\t\t\t_next: NextFunction,\n\t\t) => {\n\t\t\tif (error instanceof ZodError) {\n\t\t\t\tconst validationErrors = fromZodError(error);\n\n\t\t\t\tconst issues = validationErrors.details.map((detail) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tproperty: detail.path,\n\t\t\t\t\t\tmessage: detail.message,\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\t// logger.warn(\"on request error, validation error\", {\n\t\t\t\t// \tissues,\n\t\t\t\t// });\n\n\t\t\t\treturn response.status(HttpStatusCode.Conflict).send({\n\t\t\t\t\tmessage: \"Validation Error\",\n\t\t\t\t\tissues,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (error instanceof AppError) {\n\t\t\t\tconst { message, payload, statusCode } = error;\n\n\t\t\t\t// void logger.error(message, payload);\n\n\t\t\t\treturn response.status(statusCode).json({\n\t\t\t\t\terrors: {\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconsole.error(error);\n\n\t\t\treturn response.status(HttpStatusCode.InternalServerError).json({\n\t\t\t\tmessage: \"Internal server error\",\n\t\t\t});\n\t\t},\n\t);\n\n\treturn app;\n}\n","import { error as logError } from \"node:console\";\n\n// import { getEnvVariables } from \"@/env\";\nimport mongoose from \"mongoose\";\n\n\nexport async function loadMongodbConnection() {\n\ttry {\n\t\t// const env = getEnvVariables();s\n\n\t\t// await mongoose.connect(process.env.MONGODB_URL, {\n\t\t// \tminPoolSize: 2,\n\t\t// \tmaxPoolSize: 10,\n\t\t// \tauthSource: \"admin\",\n\t\t// });\n\n\t\tawait mongoose.connect(\n\t\t\t\"mongodb://docker:docker@localhost:27017/event-facil-mongodb\",\n\t\t\t{\n\t\t\t\tminPoolSize: 2,\n\t\t\t\tmaxPoolSize: 10,\n\t\t\t\tauthSource: \"admin\",\n\t\t\t},\n\t\t);\n\n\t\treturn mongoose;\n\t} catch (error) {\n\t\tlogError(error);\n\t\tthrow new Error(\"Failed to load mongodb!\");\n\t}\n}\n","import { Router } from \"express\";\nimport { verifyAuthAndAccount } from \"../middlewares/verify-auth-and-account\";\nimport { authRouter } from \"./auth-router\";\nimport { suppliersRouter } from \"./suppliers-router\";\nimport { eventsRouter } from \"./events-router\";\nimport { dashboardRouter } from \"./dashboard-router\";\nimport { calendarRouter } from \"./calendar-router\";\n\nconst routes = Router();\n\nroutes.use(authRouter);\n\nroutes.use(verifyAuthAndAccount);\nroutes.use(suppliersRouter);\nroutes.use(eventsRouter);\nroutes.use(dashboardRouter);\nroutes.use(calendarRouter);\n\nexport default routes;\n","import { z } from \"zod\";\n\nconst envSchema = z.object({\n\tMONGODB_URL: z.string().default(\"\"),\n\tJWT_SECRET: z.string().default(\"\"),\n\tFUNCTIONS_EMULATOR: z.string().default(\"\"),\n});\n\nexport function getEnvVariables() {\n\treturn envSchema.parse(process.env);\n}\n","import { HttpStatusCode } from \"@/core/infra/enums/http-status-code\";\nimport { getEnvVariables } from \"@/env\";\nimport logInfo from \"@/infra/libs/logs/log-info\";\nimport type { NextFunction, Request, Response } from \"express\";\nimport jsonwebtoken from \"jsonwebtoken\";\n\ninterface TokenPayload {\n\tsub: string;\n}\n\nexport function verifyAuthAndAccount(\n\trequest: Request,\n\tresponse: Response,\n\tnext: NextFunction,\n) {\n\tconst env = getEnvVariables();\n\tconst authHeader = request.headers.authorization;\n\tconst accountId = request.headers[\"x-account-id\"];\n\n\tif (!authHeader) {\n\t\treturn response.status(HttpStatusCode.Unauthorized).send();\n\t}\n\n\tif (!accountId) {\n\t\treturn response.status(HttpStatusCode.Unauthorized).send();\n\t}\n\n\tconst [, token] = authHeader.split(\" \");\n\n\ttry {\n\t\tconst decoded = jsonwebtoken.verify(token, env.JWT_SECRET);\n\n\t\tconst { sub } = decoded as TokenPayload;\n\n\t\trequest.user = {\n\t\t\tid: sub,\n\t\t\taccountId: accountId as string,\n\t\t};\n\n\t\treturn next();\n\t} catch {\n\t\treturn response.status(HttpStatusCode.Unauthorized).json();\n\t}\n}\n","import { Router } from \"express\";\nimport { LoginUserController } from \"../controllers/auth/login-user-controller\";\nimport { RegisterUserController } from \"../controllers/auth/register-user-controller\";\n\nexport const authRouter = Router();\n\nauthRouter.post(\"/register\", (request, response) =>\n\tRegisterUserController.handle(request, response),\n);\n\nauthRouter.post(\"/login\", (request, response) =>\n\tLoginUserController.handle(request, response),\n);\n","import { Schema, model } from \"mongoose\";\n\nexport enum Plan {\n\tESSENTIAL = \"essential\",\n\tCLASSIC = \"classic\",\n\tPREMIUM = \"premium\",\n\tEXCLUSIVE = \"exclusive\",\n}\n\nexport interface Account {\n\tname: string;\n\tplan: Plan;\n\tuserId: Schema.Types.ObjectId;\n\tcreatedAt: Date;\n\tupdatedAt: Date;\n\tdeletedAt?: Date;\n}\n\nconst accountSchema = new Schema<Account>({\n\tname: { type: String, required: true },\n\tplan: { type: String, enum: Object.values(Plan), required: true },\n\tuserId: { type: Schema.Types.ObjectId, required: true, ref: \"User\" },\n\tcreatedAt: {\n\t\ttype: Date,\n\t\tdefault: Date.now,\n\t},\n\tupdatedAt: {\n\t\ttype: Date,\n\t\tdefault: Date.now,\n\t},\n\tdeletedAt: {\n\t\ttype: Date,\n\t},\n});\n\nexport const MongooseAccountModel = model(\"Account\", accountSchema, \"accounts\");\n","import { Schema, model } from \"mongoose\";\n\nexport interface User {\n\tname: string;\n\tphoneNumber: string;\n\temail: string;\n\tpasswordHash: string;\n\tcreatedAt: Date;\n\tupdatedAt: Date;\n\tdeletedAt?: Date;\n}\n\nconst userSchema = new Schema<User>({\n\tname: { type: String, required: true },\n\tphoneNumber: { type: String, required: true },\n\temail: { type: String, required: true },\n\tpasswordHash: { type: String, required: true },\n\tcreatedAt: {\n\t\ttype: Date,\n\t\tdefault: Date.now,\n\t},\n\tupdatedAt: {\n\t\ttype: Date,\n\t\tdefault: Date.now,\n\t},\n\tdeletedAt: {\n\t\ttype: Date,\n\t},\n});\n\nexport const MongooseUserModel = model(\"User\", userSchema, \"users\");\n","import { HttpStatusCode } from \"@/core/infra/enums/http-status-code\";\nimport { getEnvVariables } from \"@/env\";\nimport { MongooseAccountModel } from \"@/infra/databases/model/mongoose-account-model\";\nimport { MongooseUserModel } from \"@/infra/databases/model/mongoose-user-model\";\nimport bcrypt from \"bcrypt\";\nimport type { Request, Response } from \"express\";\nimport jsonwebtoken from \"jsonwebtoken\";\nimport { z } from \"zod\";\n\nconst loginUserBodySchema = z.object({\n\temail: z.string().email(),\n\tpassword: z.string().min(6),\n\trememberMe: z.boolean().optional().default(false),\n});\n\nexport class LoginUserController {\n\tprivate static readonly env = getEnvVariables();\n\n\tpublic static async handle(request: Request, response: Response) {\n\t\tconst { email, password, rememberMe } = loginUserBodySchema.parse(\n\t\t\trequest.body,\n\t\t);\n\n\t\tconst user = await MongooseUserModel.findOne({ email });\n\n\t\tif (!user) {\n\t\t\treturn response.status(HttpStatusCode.BadRequest).send({\n\t\t\t\tmessage: \"Invalid email or password!\",\n\t\t\t});\n\t\t}\n\n\t\tconst passwordMatch = bcrypt.compareSync(password, user.passwordHash);\n\n\t\tif (!passwordMatch) {\n\t\t\treturn response\n\t\t\t\t.status(HttpStatusCode.BadRequest)\n\t\t\t\t.send({ message: \"Invalid email or password!\" });\n\t\t}\n\n\t\tconst userId = user._id;\n\t\tconst expiresIn = rememberMe ? \"7d\" : \"1d\";\n\n\t\tconst token = jsonwebtoken.sign({ sub: userId }, this.env.JWT_SECRET, {\n\t\t\texpiresIn,\n\t\t});\n\n\t\tconst accounts = await MongooseAccountModel.find({ userId });\n\n\t\tconst accountsPayload = accounts.map((account) => {\n\t\t\treturn {\n\t\t\t\tid: account._id,\n\t\t\t\tname: account.name,\n\t\t\t\tplan: account.plan,\n\t\t\t\tcreatedAt: account.createdAt,\n\t\t\t};\n\t\t});\n\n\t\treturn response.status(HttpStatusCode.Ok).send({\n\t\t\tid: userId,\n\t\t\tname: user.name,\n\t\t\temail: user.email,\n\t\t\tphoneNumber: user.phoneNumber,\n\t\t\ttoken,\n\t\t\tcreatedAt: user.createdAt,\n\t\t\taccounts: accountsPayload,\n\t\t});\n\t}\n}\n","import { HttpStatusCode } from \"@/core/infra/enums/http-status-code\";\nimport {\n\tMongooseAccountModel,\n\tPlan,\n} from \"@/infra/databases/model/mongoose-account-model\";\nimport { MongooseUserModel } from \"@/infra/databases/model/mongoose-user-model\";\nimport bcrypt from \"bcrypt\";\nimport type { Request, Response } from \"express\";\nimport { z } from \"zod\";\n\nconst registerUserBodySchema = z.object({\n\tname: z.string().min(1),\n\temail: z.string().email(),\n\tpassword: z.string().min(6),\n\tphoneNumber: z.string().min(11).max(11),\n});\n\nexport class RegisterUserController {\n\tpublic static async handle(request: Request, response: Response) {\n\t\tconst { email, password, phoneNumber, name } = registerUserBodySchema.parse(\n\t\t\trequest.body,\n\t\t);\n\n\t\tconst userAlreadyCreated = await MongooseUserModel.findOne({ email });\n\n\t\tif (userAlreadyCreated) {\n\t\t\treturn response\n\t\t\t\t.status(HttpStatusCode.BadRequest)\n\t\t\t\t.json({ message: \"User already created\" });\n\t\t}\n\n\t\tconst hashedPassword = bcrypt.hashSync(password, 10);\n\n\t\tconst userCreated = await MongooseUserModel.create({\n\t\t\tname,\n\t\t\tphoneNumber,\n\t\t\temail,\n\t\t\tpasswordHash: hashedPassword,\n\t\t});\n\n\t\tawait MongooseAccountModel.create({\n\t\t\tname,\n\t\t\tplan: Plan.ESSENTIAL,\n\t\t\tuserId: userCreated._id,\n\t\t});\n\n\t\treturn response.status(HttpStatusCode.Created).send();\n\t}\n}\n","import { Router } from \"express\";\nimport { CreateSupplierController } from \"../controllers/suppliers/create-supplier-controller\";\nimport { DeleteSupplierController } from \"../controllers/suppliers/delete-supplier-controller\";\nimport { FetchByIdSupplierController } from \"../controllers/suppliers/fetch-by-id-supplier-controller\";\nimport { FetchManySupplierController } from \"../controllers/suppliers/fetch-many-supplier-controller\";\nimport { UpdateSupplierController } from \"../controllers/suppliers/update-supplier-controller\";\n\nexport const suppliersRouter = Router();\n\nsuppliersRouter.post(\"/suppliers\", (request, response) =>\n\tCreateSupplierController.handle(request, response),\n);\n\nsuppliersRouter.put(\"/suppliers/:supplierId\", (request, response) =>\n\tUpdateSupplierController.handle(request, response),\n);\n\nsuppliersRouter.delete(\"/suppliers/:supplierId\", (request, response) =>\n\tDeleteSupplierController.handle(request, response),\n);\n\nsuppliersRouter.get(\"/suppliers\", (request, response) =>\n\tFetchManySupplierController.handle(request, response),\n);\n\nsuppliersRouter.get(\"/suppliers/:supplierId\", (request, response) =>\n\tFetchByIdSupplierController.handle(request, response),\n);\n","import { Schema, model } from \"mongoose\";\n\nexport interface Costs {\n\ttype: string;\n\tvalue: number;\n}\n\nexport interface Supplier {\n\tname: string;\n\tcosts: Costs[];\n\taccountId: Schema.Types.ObjectId;\n\tcreatedAt: Date;\n\tupdatedAt: Date;\n\tdeletedAt?: Date;\n}\n\nconst costSchema = new Schema<Costs>(\n\t{\n\t\ttype: { type: String, required: true },\n\t\tvalue: { type: Number, required: true },\n\t},\n\t{ _id: false },\n);\n\nconst supplierSchema = new Schema<Supplier>({\n\tname: { type: String, required: true },\n\tcosts: [costSchema],\n\taccountId: { type: Schema.Types.ObjectId, required: true, ref: \"Account\" },\n\tcreatedAt: {\n\t\ttype: Date,\n\t\tdefault: Date.now,\n\t},\n\tupdatedAt: {\n\t\ttype: Date,\n\t\tdefault: Date.now,\n\t},\n\tdeletedAt: {\n\t\ttype: Date,\n\t},\n});\n\nexport const MongooseSupplierModel = model(\n\t\"Supplier\",\n\tsupplierSchema,\n\t\"suppliers\",\n);\n","import { HttpStatusCode } from \"@/core/infra/enums/http-status-code\";\nimport { MongooseAccountModel } from \"@/infra/databases/model/mongoose-account-model\";\nimport { MongooseSupplierModel } from \"@/infra/databases/model/mongoose-supplier-model\";\nimport { MongooseUserModel } from \"@/infra/databases/model/mongoose-user-model\";\nimport type { Request, Response } from \"express\";\nimport { z } from \"zod\";\n\nconst createSupplierBodySchema = z.object({\n\tname: z.string().min(1),\n\tcosts: z.array(\n\t\tz.object({\n\t\t\ttype: z.string().min(1),\n\t\t\tvalue: z.number().min(0),\n\t\t}),\n\t),\n});\n\nexport class CreateSupplierController {\n\tpublic static async handle(request: Request, response: Response) {\n\t\tconst { id: userId, accountId } = request.user;\n\t\tconst { costs, name } = createSupplierBodySchema.parse(request.body);\n\n\t\tconst user = await MongooseUserModel.findById(userId);\n\n\t\tif (!user) {\n\t\t\treturn response.status(HttpStatusCode.NotFound).send();\n\t\t}\n\n\t\tconst accountAlreadyExists = await MongooseAccountModel.findById(accountId);\n\n\t\tif (!accountAlreadyExists) {\n\t\t\treturn response.status(HttpStatusCode.NotFound).send();\n\t\t}\n\n\t\tawait MongooseSupplierModel.create({\n\t\t\taccountId,\n\t\t\tname,\n\t\t\tcosts,\n\t\t});\n\n\t\treturn response.status(HttpStatusCode.Created).send();\n\t}\n}\n","import { HttpStatusCode } from \"@/core/infra/enums/http-status-code\";\nimport { MongooseSupplierModel } from \"@/infra/databases/model/mongoose-supplier-model\";\nimport type { Request, Response } from \"express\";\nimport { z } from \"zod\";\n\nconst deleteSupplierParamsSchema = z.object({\n\tsupplierId: z.string().min(1),\n});\n\nexport class DeleteSupplierController {\n\tpublic static async handle(request: Request, response: Response) {\n\t\tconst { accountId } = request.user;\n\t\tconst { supplierId } = deleteSupplierParamsSchema.parse(request.params);\n\n\t\tawait MongooseSupplierModel.deleteOne({ _id: supplierId, accountId });\n\n\t\treturn response.status(HttpStatusCode.NoContent).send();\n\t}\n}\n","import { HttpStatusCode } from \"@/core/infra/enums/http-status-code\";\nimport { MongooseSupplierModel } from \"@/infra/databases/model/mongoose-supplier-model\";\nimport type { Request, Response } from \"express\";\nimport { z } from \"zod\";\n\nconst fetchbyidSupplierParamsSchema = z.object({\n\tsupplierId: z.string().min(1),\n});\n\nexport class FetchByIdSupplierController {\n\tpublic static async handle(request: Request, response: Response) {\n\t\tconst { supplierId } = fetchbyidSupplierParamsSchema.parse(request.params);\n\n\t\tconst supplier = await MongooseSupplierModel.findById(supplierId);\n\n\t\tif (!supplier) {\n\t\t\treturn response.status(HttpStatusCode.BadRequest).send();\n\t\t}\n\n\t\tconst suppliersSerialized = {\n\t\t\tid: supplier._id,\n\t\t\tname: supplier.name,\n\t\t\tcosts: supplier.costs.map((cost) => ({\n\t\t\t\ttype: cost.type,\n\t\t\t\tvalue: cost.value,\n\t\t\t})),\n\t\t\tcreatedAt: supplier.createdAt,\n\t\t\tupdatedAt: supplier.updatedAt,\n\t\t};\n\n\t\treturn response.status(HttpStatusCode.Ok).send(suppliersSerialized);\n\t}\n}\n","import { HttpStatusCode } from \"@/core/infra/enums/http-status-code\";\nimport { MongooseSupplierModel } from \"@/infra/databases/model/mongoose-supplier-model\";\nimport type { Request, Response } from \"express\";\nimport { z } from \"zod\";\n\nconst fetchManySupplierQuerySchema = z.object({\n\tquery: z.string().optional(),\n\tlimit: z\n\t\t.coerce\n\t\t.number({ message: 'Limit must be a number' })\n\t\t.default(30),\n\tpage: z\n\t\t.coerce\n\t\t.number({ message: 'Page must be a number' })\n\t\t.default(1),\n});\n\nexport class FetchManySupplierController {\n\tpublic static async handle(request: Request, response: Response) {\n\t\tconst { accountId } = request.user;\n\t\tconst { limit, page, query } = fetchManySupplierQuerySchema.parse(\n\t\t\trequest.query,\n\t\t);\n\n\t\tconst suppliers = await MongooseSupplierModel.find({\n\t\t\taccountId,\n\t\t\t...(query && {\n\t\t\t\t$or: [{ name: { $regex: query, $options: \"i\" } }],\n\t\t\t}),\n\t\t})\n\t\t\t.limit(limit)\n\t\t\t.skip((page - 1) * limit);\n\n\t\tconst suppliersCount = await MongooseSupplierModel.countDocuments({\n\t\t\taccountId,\n\t\t});\n\n\t\tconst suppliersSerialized = suppliers.map((supplier) => ({\n\t\t\tid: supplier._id,\n\t\t\tname: supplier.name,\n\t\t\tcosts: supplier.costs.map((cost) => ({\n\t\t\t\ttype: cost.type,\n\t\t\t\tvalue: cost.value,\n\t\t\t})),\n\t\t\tcreatedAt: supplier.createdAt,\n\t\t\tupdatedAt: supplier.updatedAt,\n\t\t}));\n\n\t\tconst totalPages = Math.ceil(suppliersCount / limit);\n\n\t\treturn response.status(HttpStatusCode.Ok).json({\n\t\t\tdata: suppliersSerialized,\n\t\t\tmeta: {\n\t\t\t\tpage,\n\t\t\t\tlimit,\n\t\t\t\ttotal: suppliersCount,\n\t\t\t\ttotalPages,\n\t\t\t},\n\t\t});\n\t}\n}\n","import { HttpStatusCode } from \"@/core/infra/enums/http-status-code\";\nimport { MongooseSupplierModel } from \"@/infra/databases/model/mongoose-supplier-model\";\nimport type { Request, Response } from \"express\";\nimport { z } from \"zod\";\n\nconst updateSupplierParamsSchema = z.object({\n\tname: z.string(),\n\tcosts: z.array(\n\t\tz.object({\n\t\t\ttype: z.string(),\n\t\t\tvalue: z.number(),\n\t\t}),\n\t),\n});\n\nexport class UpdateSupplierController {\n\tpublic static async handle(request: Request, response: Response) {\n\t\tconst { accountId } = request.user;\n\t\tconst { supplierId } = request.params;\n\t\tconst { costs, name } = updateSupplierParamsSchema.parse(request.body);\n\n\t\tconst supplier = await MongooseSupplierModel.findOne({\n\t\t\t_id: supplierId,\n\t\t\taccountId,\n\t\t});\n\n\t\tif (!supplier) {\n\t\t\treturn response.status(HttpStatusCode.NotFound).send();\n\t\t}\n\n\t\tawait MongooseSupplierModel.updateOne(\n\t\t\t{ _id: supplierId },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tname,\n\t\t\t\t\tcosts,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\treturn response.status(HttpStatusCode.NoContent).send();\n\t}\n}\n","import { Router } from \"express\";\nimport { CreateEventController } from \"../controllers/events/create-event-controller\";\nimport { FetchManyEventController } from \"../controllers/events/fetch-many-event-controller\";\nimport { DeleteEventController } from \"../controllers/events/delete-event-controller\";\nimport { FetchByIdEventController } from \"../controllers/events/fetch-by-id-event-controller\";\nimport { UpdateEventController } from \"../controllers/events/update-event-controller\";\n\nexport const eventsRouter = Router();\n\neventsRouter.post(\"/events\", (request, response) => CreateEventController.handle(request, response));\n\neventsRouter.get(\"/events\", (request, response) => FetchManyEventController.handle(request, response));\neventsRouter.get(\"/events/:eventId\", (request, response) =>\n\tFetchByIdEventController.handle(request, response),\n);\n\neventsRouter.put(\"/events/:eventId\", (request, response) => UpdateEventController.handle(request, response));\n\neventsRouter.delete(\"/events/:eventId\", (request, response) =>\n\tDeleteEventController.handle(request, response),\n);","import { Schema, model } from \"mongoose\";\n\nexport interface Supplier {\n\tname: string;\n\ttype: string;\n\tvalue: number;\n\tquantity: number;\n}\n\nexport interface Event {\n\tname: string;\n\tdateTime: Date;\n\taddress: string;\n\tshouldNotifyWhatsappWhenNear: boolean;\n\tsuppliers: Supplier[];\n\tincome: number;\n\texpense: number;\n\taccountId: Schema.Types.ObjectId;\n\tcreatedAt: Date;\n\tupdatedAt: Date;\n\tdeletedAt?: Date;\n}\n\nconst supplierSchema = new Schema<Supplier>(\n\t{\n\t\tname: { type: String, required: true },\n\t\ttype: { type: String, required: true },\n\t\tvalue: { type: Number, required: true },\n\t\tquantity: { type: Number, required: true },\n\t},\n\t{ _id: false },\n);\n\nconst eventSchema = new Schema<Event>({\n\tname: { type: String, required: true },\n\taddress: { type: String, required: true },\n\tincome: { type: Number, required: true },\n\texpense: { type: Number, required: true },\n\tshouldNotifyWhatsappWhenNear: { type: Boolean, required: true },\n\tdateTime: {\n\t\ttype: Date,\n\t\trequired: true,\n\t},\n\tsuppliers: { type: [supplierSchema], required: true },\n\taccountId: { type: Schema.Types.ObjectId, required: true, ref: \"Account\" },\n\tcreatedAt: {\n\t\ttype: Date,\n\t\tdefault: Date.now,\n\t},\n\tupdatedAt: {\n\t\ttype: Date,\n\t\tdefault: Date.now,\n\t},\n\tdeletedAt: {\n\t\ttype: Date,\n\t},\n});\n\nexport const MongooseEventModel = model(\"Event\", eventSchema, \"events\");\n","import { HttpStatusCode } from \"@/core/infra/enums/http-status-code\";\nimport { MongooseAccountModel } from \"@/infra/databases/model/mongoose-account-model\";\nimport { MongooseEventModel } from \"@/infra/databases/model/mongoose-event-model\";\nimport { MongooseUserModel } from \"@/infra/databases/model/mongoose-user-model\";\nimport type { Request, Response } from \"express\";\nimport { z } from \"zod\";\n\nconst createEventBodySchema = z.object({\n\tname: z.string().min(1),\n\tdateTime: z.coerce.date(),\n\taddress: z.string().min(1),\n\tshouldNotifyWhatsappWhenNear: z.boolean(),\n\tincome: z.number().min(1),\n\texpense: z.number().min(1),\n\tsuppliers: z.array(\n\t\tz.object({\n\t\t\tname: z.string().min(1),\n\t\t\ttype: z.string().min(1),\n\t\t\tvalue: z.number().min(1),\n\t\t\tquantity: z.number().min(1),\n\t\t}),\n\t),\n});\n\nexport class CreateEventController {\n\tpublic static async handle(request: Request, response: Response) {\n\t\tconst { id: userId, accountId } = request.user;\n\t\tconst {\n\t\t\tname,\n\t\t\tdateTime,\n\t\t\taddress,\n\t\t\tshouldNotifyWhatsappWhenNear,\n\t\t\tincome,\n\t\t\texpense,\n\t\t\tsuppliers,\n\t\t} = createEventBodySchema.parse(request.body);\n\n\t\tconst user = await MongooseUserModel.findById(userId);\n\n\t\tif (!user) {\n\t\t\treturn response.status(HttpStatusCode.NotFound).send();\n\t\t}\n\n\t\tconst accountAlreadyExists = await MongooseAccountModel.findById(accountId);\n\n\t\tif (!accountAlreadyExists) {\n\t\t\treturn response.status(HttpStatusCode.NotFound).send();\n\t\t}\n\n\t\tawait MongooseEventModel.create({\n\t\t\tname,\n\t\t\tdateTime: dateTime.getTime(),\n\t\t\taddress,\n\t\t\tshouldNotifyWhatsappWhenNear,\n\t\t\tincome,\n\t\t\texpense,\n\t\t\tsuppliers,\n\t\t\taccountId,\n\t\t});\n\n\t\treturn response.status(HttpStatusCode.Created).send();\n\t}\n}\n","import { HttpStatusCode } from \"@/core/infra/enums/http-status-code\";\nimport { MongooseEventModel } from \"@/infra/databases/model/mongoose-event-model\";\nimport type { Request, Response } from \"express\";\nimport { z } from \"zod\";\n\nconst fetchManyEventQuerySchema = z.object({\n\tquery: z.string().optional(),\n\tlimit: z\n\t\t.coerce\n\t\t.number({ message: 'Limit must be a number' })\n\t\t.default(30),\n\tpage: z\n\t\t.coerce\n\t\t.number({ message: 'Page must be a number' })\n\t\t.default(1),\n});\n\nexport class FetchManyEventController {\n\tpublic static async handle(request: Request, response: Response) {\n\t\tconst { accountId } = request.user;\n\t\tconst { limit, page, query } = fetchManyEventQuerySchema.parse(\n\t\t\trequest.query,\n\t\t);\n\n\t\tconst events = await MongooseEventModel.find({\n\t\t\taccountId,\n\t\t\t...(query && {\n\t\t\t\t$or: [{ name: { $regex: query, $options: \"i\" } }],\n\t\t\t}),\n\t\t})\n\t\t\t.limit(limit)\n\t\t\t.skip((page - 1) * limit);\n\n\t\tconst eventsCount = await MongooseEventModel.countDocuments({\n\t\t\taccountId,\n\t\t});\n\n\t\tconst eventsSerialized = events.map((event) => ({\n\t\t\tid: event._id,\n\t\t\tname: event.name,\n\t\t\tdateTime: event.dateTime,\n\t\t\taddress: event.address,\n\t\t\tshouldNotifyWhatsappWhenNear: event.shouldNotifyWhatsappWhenNear,\n\t\t\tincome: event.income,\n\t\t\texpense: event.expense,\n\t\t\tsuppliers: event.suppliers,\n\t\t\tcreatedAt: event.createdAt,\n\t\t\tupdatedAt: event.updatedAt,\n\t\t}));\n\n\t\tconst totalPages = Math.ceil(eventsCount / limit);\n\n\t\treturn response.status(HttpStatusCode.Ok).json({\n\t\t\tdata: eventsSerialized,\n\t\t\tmeta: {\n\t\t\t\tpage,\n\t\t\t\tlimit,\n\t\t\t\ttotal: eventsCount,\n\t\t\t\ttotalPages,\n\t\t\t},\n\t\t});\n\t}\n}\n","import { HttpStatusCode } from \"@/core/infra/enums/http-status-code\";\nimport { MongooseEventModel } from \"@/infra/databases/model/mongoose-event-model\";\nimport type { Request, Response } from \"express\";\nimport { z } from \"zod\";\n\nconst deleteEventParamsSchema = z.object({\n\teventId: z.string().min(1),\n});\n\nexport class DeleteEventController {\n\tpublic static async handle(request: Request, response: Response) {\n\t\tconst { accountId } = request.user;\n\t\tconst { eventId } = deleteEventParamsSchema.parse(request.params);\n\n\t\tawait MongooseEventModel.deleteOne({ _id: eventId, accountId });\n\n\t\treturn response.status(HttpStatusCode.NoContent).send();\n\t}\n}\n","import { HttpStatusCode } from \"@/core/infra/enums/http-status-code\";\nimport { MongooseEventModel } from \"@/infra/databases/model/mongoose-event-model\";\nimport type { Request, Response } from \"express\";\nimport { z } from \"zod\";\n\nconst fetchbyidEventParamsSchema = z.object({\n\teventId: z.string().min(1),\n});\n\nexport class FetchByIdEventController {\n\tpublic static async handle(request: Request, response: Response) {\n\t\tconst { eventId } = fetchbyidEventParamsSchema.parse(request.params);\n\n\t\tconst event = await MongooseEventModel.findById(eventId);\n\n\t\tif (!event) {\n\t\t\treturn response.status(HttpStatusCode.BadRequest).send();\n\t\t}\n\n\t\tconst eventsSerialized = {\n\t\t\tid: event._id,\n\t\t\tname: event.name,\n\t\t\tdateTime: event.dateTime,\n\t\t\taddress: event.address,\n\t\t\tshouldNotifyWhatsappWhenNear: event.shouldNotifyWhatsappWhenNear,\n\t\t\tsuppliers: event.suppliers.map((supplier) => ({\n\t\t\t\tname: supplier.name,\n\t\t\t\ttype: supplier.type,\n\t\t\t\tvalue: supplier.value,\n\t\t\t\tquantity: supplier.quantity,\n\t\t\t})),\n\t\t\tincome: event.income,\n\t\t\texpense: event.expense,\n\t\t\tcreatedAt: event.createdAt,\n\t\t\tupdatedAt: event.updatedAt,\n\t\t};\n\n\t\treturn response.status(HttpStatusCode.Ok).send(eventsSerialized);\n\t}\n}\n","import { HttpStatusCode } from \"@/core/infra/enums/http-status-code\";\nimport { MongooseAccountModel } from \"@/infra/databases/model/mongoose-account-model\";\nimport { MongooseEventModel } from \"@/infra/databases/model/mongoose-event-model\";\nimport { MongooseUserModel } from \"@/infra/databases/model/mongoose-user-model\";\nimport type { Request, Response } from \"express\";\nimport { z } from \"zod\";\n\nconst updateEventBodySchema = z.object({\n\tname: z.string().min(1),\n\tdateTime: z.coerce.date(),\n\taddress: z.string().min(1),\n\tshouldNotifyWhatsappWhenNear: z.boolean(),\n\tincome: z.number().min(1),\n\texpense: z.number().min(1),\n\tsuppliers: z.array(\n\t\tz.object({\n\t\t\tname: z.string().min(1),\n\t\t\ttype: z.string().min(1),\n\t\t\tvalue: z.number().min(1),\n\t\t\tquantity: z.number().min(1),\n\t\t}),\n\t),\n});\n\nexport class UpdateEventController {\n\tpublic static async handle(request: Request, response: Response) {\n\t\tconst { id: userId, accountId } = request.user;\n\t\tconst { eventId } = request.params;\n\t\tconst {\n\t\t\tname,\n\t\t\tdateTime,\n\t\t\taddress,\n\t\t\tshouldNotifyWhatsappWhenNear,\n\t\t\tincome,\n\t\t\texpense,\n\t\t\tsuppliers,\n\t\t} = updateEventBodySchema.parse(request.body);\n\n\t\tconst user = await MongooseUserModel.findById(userId);\n\n\t\tif (!user) {\n\t\t\treturn response.status(HttpStatusCode.NotFound).send();\n\t\t}\n\n\t\tconst accountAlreadyExists = await MongooseAccountModel.findById(accountId);\n\n\t\tif (!accountAlreadyExists) {\n\t\t\treturn response.status(HttpStatusCode.NotFound).send();\n\t\t}\n\n\t\tawait MongooseEventModel.updateOne(\n\t\t\t{\n\t\t\t\t_id: eventId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tname,\n\t\t\t\t\tdateTime,\n\t\t\t\t\taddress,\n\t\t\t\t\tshouldNotifyWhatsappWhenNear,\n\t\t\t\t\tincome,\n\t\t\t\t\texpense,\n\t\t\t\t\tsuppliers,\n\t\t\t\t\taccountId,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\treturn response.status(HttpStatusCode.Ok).send();\n\t}\n}\n","import { Router } from \"express\";\nimport { DashboardController } from \"../controllers/dashboard/dashboard-controller\";\n\nexport const dashboardRouter = Router();\n\ndashboardRouter.get(\"/dashboard\", (request, response) =>\n\tDashboardController.handle(request, response),\n);\n","import { HttpStatusCode } from \"@/core/infra/enums/http-status-code\";\nimport { MongooseEventModel } from \"@/infra/databases/model/mongoose-event-model\";\nimport { endOfMonth, endOfYear, startOfMonth, startOfYear } from \"date-fns\";\nimport type { Request, Response } from \"express\";\n\ninterface EventMonthlyDivided {\n\t[key: string]: {\n\t\tincome: number;\n\t\texpense: number;\n\t};\n}\n\nexport class DashboardController {\n\tprivate static readonly monthNames = [\n\t\t\"Jan\",\n\t\t\"Fev\",\n\t\t\"Mar\",\n\t\t\"Abr\",\n\t\t\"Mai\",\n\t\t\"Jun\",\n\t\t\"Jul\",\n\t\t\"Ago\",\n\t\t\"Set\",\n\t\t\"Out\",\n\t\t\"Nov\",\n\t\t\"Dez\",\n\t];\n\n\tpublic static async handle(_request: Request, response: Response) {\n\t\tconst now = new Date();\n\n\t\tconst monthlyEvents = await MongooseEventModel.find({\n\t\t\tdateTime: {\n\t\t\t\t$gte: startOfMonth(now),\n\t\t\t\t$lte: endOfMonth(now),\n\t\t\t},\n\t\t}).exec();\n\n\t\tconst annualEvents = await MongooseEventModel.find({\n\t\t\tdateTime: {\n\t\t\t\t$gte: startOfYear(now),\n\t\t\t\t$lte: endOfYear(now),\n\t\t\t},\n\t\t}).exec();\n\n\t\tconst eventsMonthlyDivided = annualEvents.reduce((acc, event) => {\n\t\t\tconst month = this.getMonthName(event.dateTime);\n\n\t\t\tif (!acc[month]) {\n\t\t\t\tacc[month] = { income: 0, expense: 0 };\n\t\t\t}\n\n\t\t\tacc[month].income += event.income;\n\t\t\tacc[month].expense += event.expense;\n\n\t\t\treturn acc;\n\t\t}, {} as EventMonthlyDivided);\n\n\t\tfor (const month of this.monthNames) {\n\t\t\tif (!eventsMonthlyDivided[month]) {\n\t\t\t\teventsMonthlyDivided[month] = { income: 0, expense: 0 };\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\teventsMonthlyDivided[month].income = Number(\n\t\t\t\teventsMonthlyDivided[month].income.toFixed(2),\n\t\t\t);\n\n\t\t\teventsMonthlyDivided[month].expense = Number(\n\t\t\t\teventsMonthlyDivided[month].expense.toFixed(2),\n\t\t\t);\n\t\t}\n\n\t\tconst incomePerMonth = monthlyEvents.reduce((acc, event) => {\n\t\t\treturn Number((acc + event.income).toFixed(2));\n\t\t}, 0);\n\n\t\tconst expensePerMonth = monthlyEvents.reduce((acc, event) => {\n\t\t\treturn Number((acc + event.expense).toFixed(2));\n\t\t}, 0);\n\n\t\tconst profitPerMonth = Number(\n\t\t\t(incomePerMonth - expensePerMonth).toFixed(2),\n\t\t);\n\t\tconst totalPerMonth = monthlyEvents.length;\n\n\t\treturn response.status(HttpStatusCode.Ok).send({\n\t\t\tmonthlyEvents: eventsMonthlyDivided,\n\t\t\tincomePerMonth,\n\t\t\texpensePerMonth,\n\t\t\ttotalPerMonth,\n\t\t\tprofitPerMonth,\n\t\t});\n\t}\n\n\tprivate static getMonthName(date: Date) {\n\t\tconst month = date.toLocaleString(\"pt-BR\", { month: \"short\" });\n\t\treturn this.capitalizeFirstLetter(month.replace(\".\", \"\"));\n\t}\n\n\tprivate static capitalizeFirstLetter(input: string): string {\n\t\tif (!input) return input;\n\t\treturn input.charAt(0).toUpperCase() + input.slice(1);\n\t}\n}\n","import { Router } from \"express\";\nimport { CalendarController } from \"../controllers/calendar/calendar-controller\";\n\nexport const calendarRouter = Router();\n\ncalendarRouter.get(\"/calendar\", (request, response) =>\n\tCalendarController.handle(request, response),\n);\n","import { HttpStatusCode } from \"@/core/infra/enums/http-status-code\";\nimport { MongooseEventModel } from \"@/infra/databases/model/mongoose-event-model\";\nimport type { Request, Response } from \"express\";\nimport { z } from \"zod\";\n\nconst calendarQuerySchema = z.object({\n\tfromDate: z.coerce.date(),\n\ttoDate: z.coerce.date(),\n});\n\nexport class CalendarController {\n\tpublic static async handle(request: Request, response: Response) {\n\t\tconsole.log(\n\t\t\t\"[CalendarController] Handling request to list events for user\",\n\t\t\trequest.query,\n\t\t);\n\n\t\tconst { accountId } = request.user;\n\t\tconst { fromDate, toDate } = calendarQuerySchema.parse(request.query);\n\n\t\tconst events = await MongooseEventModel.find({\n\t\t\taccountId,\n\t\t\tdateTime: {\n\t\t\t\t$gte: fromDate,\n\t\t\t\t$lte: toDate,\n\t\t\t},\n\t\t});\n\n\t\tconst eventsSerialized = events.map((event) => ({\n\t\t\tid: event._id,\n\t\t\tname: event.name,\n\t\t\tdateTime: event.dateTime,\n\t\t\taddress: event.address,\n\t\t\tshouldNotifyWhatsappWhenNear: event.shouldNotifyWhatsappWhenNear,\n\t\t\tincome: event.income,\n\t\t\texpense: event.expense,\n\t\t\tsuppliers: event.suppliers,\n\t\t\tcreatedAt: event.createdAt,\n\t\t\tupdatedAt: event.updatedAt,\n\t\t}));\n\n\t\treturn response.status(HttpStatusCode.Ok).json(eventsSerialized);\n\t}\n}\n"],"mappings":"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","names":["import_express","import_zod","mongoose","logError","import_express","jsonwebtoken","import_mongoose","Plan","import_mongoose","import_jsonwebtoken","import_zod","bcrypt","jsonwebtoken","import_bcrypt","import_zod","bcrypt","import_express","import_mongoose","import_zod","import_zod","import_zod","import_zod","import_zod","import_express","import_mongoose","supplierSchema","import_zod","import_zod","import_zod","import_zod","import_zod","import_express","import_express","import_zod","express"]}